# Example Dockerfile for container-aware adaptive throttling
FROM golang:1.24-alpine AS builder

WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download

COPY . .
RUN go build -o viewra ./cmd/viewra/main.go

FROM alpine:latest

# Install necessary runtime dependencies
RUN apk --no-cache add ca-certificates tzdata

WORKDIR /root/

# Copy the binary
COPY --from=builder /app/viewra .

# Container resource limits example:
# These would be set via docker run commands or docker-compose

# Example docker run command with resource limits:
# docker run -d \
#   --memory=2g \
#   --cpus="1.5" \
#   --blkio-weight=500 \
#   --name viewra-scanner \
#   viewra:latest

# Example docker-compose.yml section:
# services:
#   viewra:
#     image: viewra:latest
#     deploy:
#       resources:
#         limits:
#           memory: 2G
#           cpus: '1.5'
#         reservations:
#           memory: 1G
#           cpus: '0.5'

# The adaptive throttling system will automatically detect:
# - Memory limit: 2GB (throttling will activate around 1.6GB usage - 80%)
# - CPU limit: 1.5 cores (throttling will activate around 1.05 cores - 70%)
# - I/O throttling if blkio limits are set
# - Container environment via /.dockerenv and cgroup analysis

# Environment variables for additional configuration
ENV THROTTLE_TARGET_CPU_PERCENT=70
ENV THROTTLE_TARGET_MEMORY_PERCENT=80
ENV THROTTLE_TARGET_NETWORK_MBPS=80
ENV THROTTLE_EMERGENCY_BRAKE_THRESHOLD=95

EXPOSE 8080

CMD ["./viewra"] 