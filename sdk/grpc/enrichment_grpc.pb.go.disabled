// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: api/proto/enrichment.proto

package enrichment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnrichmentService_RegisterEnrichment_FullMethodName     = "/enrichment.v1.EnrichmentService/RegisterEnrichment"
	EnrichmentService_GetEnrichmentStatus_FullMethodName    = "/enrichment.v1.EnrichmentService/GetEnrichmentStatus"
	EnrichmentService_ListEnrichmentSources_FullMethodName  = "/enrichment.v1.EnrichmentService/ListEnrichmentSources"
	EnrichmentService_UpdateEnrichmentSource_FullMethodName = "/enrichment.v1.EnrichmentService/UpdateEnrichmentSource"
	EnrichmentService_TriggerEnrichmentJob_FullMethodName   = "/enrichment.v1.EnrichmentService/TriggerEnrichmentJob"
)

// EnrichmentServiceClient is the client API for EnrichmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EnrichmentService provides enrichment registration and management
type EnrichmentServiceClient interface {
	// RegisterEnrichment registers enriched metadata for a media file
	RegisterEnrichment(ctx context.Context, in *RegisterEnrichmentRequest, opts ...grpc.CallOption) (*RegisterEnrichmentResponse, error)
	// GetEnrichmentStatus returns enrichment status for a media file
	GetEnrichmentStatus(ctx context.Context, in *GetEnrichmentStatusRequest, opts ...grpc.CallOption) (*GetEnrichmentStatusResponse, error)
	// ListEnrichmentSources returns all enrichment sources
	ListEnrichmentSources(ctx context.Context, in *ListEnrichmentSourcesRequest, opts ...grpc.CallOption) (*ListEnrichmentSourcesResponse, error)
	// UpdateEnrichmentSource updates an enrichment source configuration
	UpdateEnrichmentSource(ctx context.Context, in *UpdateEnrichmentSourceRequest, opts ...grpc.CallOption) (*UpdateEnrichmentSourceResponse, error)
	// TriggerEnrichmentJob manually triggers enrichment application for a media file
	TriggerEnrichmentJob(ctx context.Context, in *TriggerEnrichmentJobRequest, opts ...grpc.CallOption) (*TriggerEnrichmentJobResponse, error)
}

type enrichmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrichmentServiceClient(cc grpc.ClientConnInterface) EnrichmentServiceClient {
	return &enrichmentServiceClient{cc}
}

func (c *enrichmentServiceClient) RegisterEnrichment(ctx context.Context, in *RegisterEnrichmentRequest, opts ...grpc.CallOption) (*RegisterEnrichmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterEnrichmentResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_RegisterEnrichment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) GetEnrichmentStatus(ctx context.Context, in *GetEnrichmentStatusRequest, opts ...grpc.CallOption) (*GetEnrichmentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnrichmentStatusResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_GetEnrichmentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) ListEnrichmentSources(ctx context.Context, in *ListEnrichmentSourcesRequest, opts ...grpc.CallOption) (*ListEnrichmentSourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnrichmentSourcesResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_ListEnrichmentSources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) UpdateEnrichmentSource(ctx context.Context, in *UpdateEnrichmentSourceRequest, opts ...grpc.CallOption) (*UpdateEnrichmentSourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEnrichmentSourceResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_UpdateEnrichmentSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrichmentServiceClient) TriggerEnrichmentJob(ctx context.Context, in *TriggerEnrichmentJobRequest, opts ...grpc.CallOption) (*TriggerEnrichmentJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerEnrichmentJobResponse)
	err := c.cc.Invoke(ctx, EnrichmentService_TriggerEnrichmentJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrichmentServiceServer is the server API for EnrichmentService service.
// All implementations must embed UnimplementedEnrichmentServiceServer
// for forward compatibility.
//
// EnrichmentService provides enrichment registration and management
type EnrichmentServiceServer interface {
	// RegisterEnrichment registers enriched metadata for a media file
	RegisterEnrichment(context.Context, *RegisterEnrichmentRequest) (*RegisterEnrichmentResponse, error)
	// GetEnrichmentStatus returns enrichment status for a media file
	GetEnrichmentStatus(context.Context, *GetEnrichmentStatusRequest) (*GetEnrichmentStatusResponse, error)
	// ListEnrichmentSources returns all enrichment sources
	ListEnrichmentSources(context.Context, *ListEnrichmentSourcesRequest) (*ListEnrichmentSourcesResponse, error)
	// UpdateEnrichmentSource updates an enrichment source configuration
	UpdateEnrichmentSource(context.Context, *UpdateEnrichmentSourceRequest) (*UpdateEnrichmentSourceResponse, error)
	// TriggerEnrichmentJob manually triggers enrichment application for a media file
	TriggerEnrichmentJob(context.Context, *TriggerEnrichmentJobRequest) (*TriggerEnrichmentJobResponse, error)
	mustEmbedUnimplementedEnrichmentServiceServer()
}

// UnimplementedEnrichmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnrichmentServiceServer struct{}

func (UnimplementedEnrichmentServiceServer) RegisterEnrichment(context.Context, *RegisterEnrichmentRequest) (*RegisterEnrichmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterEnrichment not implemented")
}
func (UnimplementedEnrichmentServiceServer) GetEnrichmentStatus(context.Context, *GetEnrichmentStatusRequest) (*GetEnrichmentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrichmentStatus not implemented")
}
func (UnimplementedEnrichmentServiceServer) ListEnrichmentSources(context.Context, *ListEnrichmentSourcesRequest) (*ListEnrichmentSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnrichmentSources not implemented")
}
func (UnimplementedEnrichmentServiceServer) UpdateEnrichmentSource(context.Context, *UpdateEnrichmentSourceRequest) (*UpdateEnrichmentSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrichmentSource not implemented")
}
func (UnimplementedEnrichmentServiceServer) TriggerEnrichmentJob(context.Context, *TriggerEnrichmentJobRequest) (*TriggerEnrichmentJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEnrichmentJob not implemented")
}
func (UnimplementedEnrichmentServiceServer) mustEmbedUnimplementedEnrichmentServiceServer() {}
func (UnimplementedEnrichmentServiceServer) testEmbeddedByValue()                           {}

// UnsafeEnrichmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrichmentServiceServer will
// result in compilation errors.
type UnsafeEnrichmentServiceServer interface {
	mustEmbedUnimplementedEnrichmentServiceServer()
}

func RegisterEnrichmentServiceServer(s grpc.ServiceRegistrar, srv EnrichmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnrichmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnrichmentService_ServiceDesc, srv)
}

func _EnrichmentService_RegisterEnrichment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterEnrichmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).RegisterEnrichment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_RegisterEnrichment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).RegisterEnrichment(ctx, req.(*RegisterEnrichmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_GetEnrichmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrichmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).GetEnrichmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_GetEnrichmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).GetEnrichmentStatus(ctx, req.(*GetEnrichmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_ListEnrichmentSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnrichmentSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).ListEnrichmentSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_ListEnrichmentSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).ListEnrichmentSources(ctx, req.(*ListEnrichmentSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_UpdateEnrichmentSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnrichmentSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).UpdateEnrichmentSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_UpdateEnrichmentSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).UpdateEnrichmentSource(ctx, req.(*UpdateEnrichmentSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrichmentService_TriggerEnrichmentJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerEnrichmentJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrichmentServiceServer).TriggerEnrichmentJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnrichmentService_TriggerEnrichmentJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrichmentServiceServer).TriggerEnrichmentJob(ctx, req.(*TriggerEnrichmentJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrichmentService_ServiceDesc is the grpc.ServiceDesc for EnrichmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrichmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enrichment.v1.EnrichmentService",
	HandlerType: (*EnrichmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterEnrichment",
			Handler:    _EnrichmentService_RegisterEnrichment_Handler,
		},
		{
			MethodName: "GetEnrichmentStatus",
			Handler:    _EnrichmentService_GetEnrichmentStatus_Handler,
		},
		{
			MethodName: "ListEnrichmentSources",
			Handler:    _EnrichmentService_ListEnrichmentSources_Handler,
		},
		{
			MethodName: "UpdateEnrichmentSource",
			Handler:    _EnrichmentService_UpdateEnrichmentSource_Handler,
		},
		{
			MethodName: "TriggerEnrichmentJob",
			Handler:    _EnrichmentService_TriggerEnrichmentJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/enrichment.proto",
}
