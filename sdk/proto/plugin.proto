syntax = "proto3";

package plugin;

option go_package = "github.com/mantonx/viewra/pkg/plugins/proto";

// Plugin service - core interface all plugins must implement
service PluginService {
  rpc Initialize(InitializeRequest) returns (InitializeResponse);
  rpc Start(StartRequest) returns (StartResponse);
  rpc Stop(StopRequest) returns (StopResponse);
  rpc Info(InfoRequest) returns (InfoResponse);
  rpc Health(HealthRequest) returns (HealthResponse);
}

// Metadata scraper service for plugins that extract metadata
service MetadataScraperService {
  rpc CanHandle(CanHandleRequest) returns (CanHandleResponse);
  rpc ExtractMetadata(ExtractMetadataRequest) returns (ExtractMetadataResponse);
  rpc GetSupportedTypes(GetSupportedTypesRequest) returns (GetSupportedTypesResponse);
}

// Scanner hook service for plugins that hook into the scanner
service ScannerHookService {
  rpc OnMediaFileScanned(OnMediaFileScannedRequest) returns (OnMediaFileScannedResponse);
  rpc OnScanStarted(OnScanStartedRequest) returns (OnScanStartedResponse);
  rpc OnScanCompleted(OnScanCompletedRequest) returns (OnScanCompletedResponse);
}

// Asset service for plugins that need to save assets (images, etc.)
service AssetService {
  rpc SaveAsset(SaveAssetRequest) returns (SaveAssetResponse);
  rpc AssetExists(AssetExistsRequest) returns (AssetExistsResponse);
  rpc RemoveAsset(RemoveAssetRequest) returns (RemoveAssetResponse);
}

// Database service for plugins that need database access
service DatabaseService {
  rpc GetModels(GetModelsRequest) returns (GetModelsResponse);
  rpc Migrate(MigrateRequest) returns (MigrateResponse);
  rpc Rollback(RollbackRequest) returns (RollbackResponse);
}

// Admin page service for plugins that provide admin interfaces
service AdminPageService {
  rpc GetAdminPages(GetAdminPagesRequest) returns (GetAdminPagesResponse);
  rpc RegisterRoutes(RegisterRoutesRequest) returns (RegisterRoutesResponse);
}

// APIRoute message for route registration
message APIRoute {
  string path = 1;
  string method = 2;
  string description = 3;
  // string plugin_id = 4; // Plugin ID will be known by the manager
}

// APIRegistrationService allows plugins to register their API routes with the host.
service APIRegistrationService {
  // GetRegisteredRoutes returns a list of API routes the plugin wishes to register.
  // The host application will typically prefix these routes, e.g., /api/plugins/<plugin-id>/<route.path>
  rpc GetRegisteredRoutes(GetRegisteredRoutesRequest) returns (GetRegisteredRoutesResponse);
}

// SearchService allows plugins to provide search functionality
service SearchService {
  rpc Search(SearchRequest) returns (SearchResponse);
  rpc GetSearchCapabilities(GetSearchCapabilitiesRequest) returns (GetSearchCapabilitiesResponse);
}

message GetRegisteredRoutesRequest {}

message GetRegisteredRoutesResponse {
  repeated APIRoute routes = 1;
}

// Asset service messages
message SaveAssetRequest {
  string media_file_id = 1;           // Changed from uint32 to string for UUID support
  string asset_type = 2;              // "music", "video", etc.
  string category = 3;                // "album", "artist", etc.
  string subtype = 4;                 // "artwork", "poster", etc.
  bytes data = 5;                     // The actual asset data
  string mime_type = 6;               // MIME type of the asset
  string source_url = 7;              // Original URL if downloaded
  map<string, string> metadata = 8;   // Additional metadata (width, height, etc.)
  string plugin_id = 9;               // Plugin identifier for asset tracking
}

message SaveAssetResponse {
  bool success = 1;
  string error = 2;
  uint32 asset_id = 3;                // ID of the saved asset
  string hash = 4;                    // Hash of the saved asset
  string relative_path = 5;           // Path where asset was saved
}

message AssetExistsRequest {
  string media_file_id = 1;           // Changed from uint32 to string for UUID support
  string asset_type = 2;
  string category = 3;
  string subtype = 4;
  string hash = 5;                    // Optional: check by hash
}

message AssetExistsResponse {
  bool exists = 1;
  uint32 asset_id = 2;             // ID if exists
  string relative_path = 3;        // Path if exists
}

message RemoveAssetRequest {
  uint32 asset_id = 1;
}

message RemoveAssetResponse {
  bool success = 1;
  string error = 2;
}

// Search service messages
message SearchRequest {
  map<string, string> query = 1;  // Flexible query parameters (title, artist, album, etc.)
  uint32 limit = 2;               // Maximum number of results
  uint32 offset = 3;              // Offset for pagination
}

message SearchResponse {
  bool success = 1;
  string error = 2;
  repeated SearchResult results = 3;
  uint32 total_count = 4;         // Total results available
  bool has_more = 5;              // Whether more results are available
}

message SearchResult {
  string id = 1;                  // Unique identifier (e.g., MusicBrainz ID)
  string title = 2;               // Track/item title
  string artist = 3;              // Artist name
  string album = 4;               // Album name
  double score = 5;               // Match confidence score (0.0-1.0)
  map<string, string> metadata = 6; // Additional metadata
}

message GetSearchCapabilitiesRequest {
  // Empty for now
}

message GetSearchCapabilitiesResponse {
  repeated string supported_fields = 1;  // Fields that can be searched (title, artist, album, etc.)
  bool supports_pagination = 2;          // Whether pagination is supported
  uint32 max_results = 3;                // Maximum results per search
}

// Core plugin interface messages
message InitializeRequest {
  PluginContext context = 1;
}

message InitializeResponse {
  bool success = 1;
  string error = 2;
}

message StartRequest {
  // Empty for now, may include context in future
}

message StartResponse {
  bool success = 1;
  string error = 2;
}

message StopRequest {
  // Empty for now
}

message StopResponse {
  bool success = 1;
  string error = 2;
}

message InfoRequest {
  // Empty for now
}

message InfoResponse {
  PluginInfo info = 1;
}

message HealthRequest {
  // Empty for now
}

message HealthResponse {
  bool healthy = 1;
  string error = 2;
}

// Metadata scraper messages
message CanHandleRequest {
  string file_path = 1;
  string mime_type = 2;
}

message CanHandleResponse {
  bool can_handle = 1;
}

message ExtractMetadataRequest {
  string file_path = 1;
}

message ExtractMetadataResponse {
  map<string, string> metadata = 1;
  string error = 2;
}

message GetSupportedTypesRequest {
  // Empty for now
}

message GetSupportedTypesResponse {
  repeated string types = 1;
}

// Scanner hook messages
message OnMediaFileScannedRequest {
  string media_file_id = 1;           // Changed from uint32 to string for UUID support
  string file_path = 2;
  map<string, string> metadata = 3;
}

message OnMediaFileScannedResponse {}

message OnScanStartedRequest {
  uint32 scan_job_id = 1;
  uint32 library_id = 2;
  string library_path = 3;
}

message OnScanStartedResponse {}

message OnScanCompletedRequest {
  uint32 scan_job_id = 1;
  uint32 library_id = 2;
  map<string, string> stats = 3;
}

message OnScanCompletedResponse {}

// Database messages
message GetModelsRequest {
  // Empty for now
}

message GetModelsResponse {
  repeated string model_names = 1;
}

message MigrateRequest {
  string connection_string = 1;
}

message MigrateResponse {
  bool success = 1;
  string error = 2;
}

message RollbackRequest {
  string connection_string = 1;
}

message RollbackResponse {
  bool success = 1;
  string error = 2;
}

// Admin page messages
message GetAdminPagesRequest {
  // Empty for now
}

message GetAdminPagesResponse {
  repeated AdminPageConfig pages = 1;
}

message RegisterRoutesRequest {
  string base_path = 1;
}

message RegisterRoutesResponse {
  bool success = 1;
  string error = 2;
}

// Common data structures
message PluginContext {
  string plugin_id = 1;
  map<string, string> config = 2;
  string log_level = 3;
  string database_url = 4;
  string base_path = 5;
  string host_service_addr = 6;  // Address of host's gRPC server for bidirectional communication
  string plugin_base_path = 7;   // Plugin-specific base path for plugin files and data
}

message PluginInfo {
  string id = 1;
  string name = 2;
  string version = 3;
  string description = 4;
  string author = 5;
  string website = 6;
  string repository = 7;
  string license = 8;
  string type = 9;
  repeated string tags = 10;
  string status = 11;
  string install_path = 12;
  int64 created_at = 13;
  int64 updated_at = 14;
}

message AdminPageConfig {
  string id = 1;
  string title = 2;
  string path = 3;
  string icon = 4;
  string category = 5;
  string url = 6;
  string type = 7;
}

// ========================================================================
// TranscodingProvider Service - Modern transcoding interface
// ========================================================================

// TranscodingProvider service for modern transcoding plugins
service TranscodingProviderService {
  // Get provider information
  rpc GetProviderInfo(GetProviderInfoRequest) returns (GetProviderInfoResponse);
  
  // Capabilities
  rpc GetSupportedFormats(GetSupportedFormatsRequest) returns (GetSupportedFormatsResponse);
  rpc GetHardwareAccelerators(GetHardwareAcceleratorsRequest) returns (GetHardwareAcceleratorsResponse);
  rpc GetQualityPresets(GetQualityPresetsRequest) returns (GetQualityPresetsResponse);
  
  // File-based transcoding
  rpc StartTranscode(StartTranscodeProviderRequest) returns (StartTranscodeProviderResponse);
  rpc GetProgress(GetProgressRequest) returns (GetProgressResponse);
  rpc StopTranscode(StopTranscodeProviderRequest) returns (StopTranscodeProviderResponse);
  
  // Streaming transcoding
  rpc StartStream(StartStreamRequest) returns (StartStreamResponse);
  rpc GetStreamData(GetStreamDataRequest) returns (stream StreamDataChunk);
  rpc StopStream(StopStreamRequest) returns (StopStreamResponse);
}

// Provider info messages
message GetProviderInfoRequest {}

message GetProviderInfoResponse {
  ProviderInfo info = 1;
  string error = 2;
}

message ProviderInfo {
  string name = 1;
  string description = 2;
  int32 priority = 3;
  map<string, string> capabilities = 4;
}

// Capabilities messages
message GetSupportedFormatsRequest {}

message GetSupportedFormatsResponse {
  repeated ContainerFormat formats = 1;
  string error = 2;
}

message ContainerFormat {
  string name = 1;
  string description = 2;
  repeated string extensions = 3;
  repeated string supported_codecs = 4;
}

message GetHardwareAcceleratorsRequest {}

message GetHardwareAcceleratorsResponse {
  repeated HardwareAccelerator accelerators = 1;
  string error = 2;
}

message HardwareAccelerator {
  string id = 1;
  string name = 2;
  string device_path = 3;
  bool available = 4;
}

message GetQualityPresetsRequest {}

message GetQualityPresetsResponse {
  repeated QualityPreset presets = 1;
  string error = 2;
}

message QualityPreset {
  string name = 1;
  string description = 2;
  int32 quality = 3;  // 0-100
  string details = 4;
}

// Transcoding messages
message StartTranscodeProviderRequest {
  TranscodeProviderRequest request = 1;
}

message StartTranscodeProviderResponse {
  TranscodeHandle handle = 1;
  string error = 2;
}

message TranscodeProviderRequest {
  string session_id = 1;
  string input_path = 2;
  string output_dir = 3;
  
  // Generic settings
  int32 quality = 4;           // 0-100 quality scale
  string speed_priority = 5;   // "fastest", "balanced", "quality"
  string container = 6;        // "mp4", "mkv", "dash", "hls"
  
  // Video settings
  string video_codec = 7;      // "h264", "h265", "vp8", "vp9", "av1"
  string resolution = 8;       // "1080p", "720p", "480p", "keep"
  
  // Audio settings
  string audio_codec = 9;      // "aac", "opus", "mp3", "copy"
  int32 audio_bitrate_kbps = 10;
  
  // Hardware preferences
  bool prefer_hardware = 11;
  string hardware_type = 12;   // "auto", "nvenc", "vaapi", "qsv", "videotoolbox"
  
  // Playback position
  int64 seek_ns = 13;          // Seek position in nanoseconds
  
  // Additional options
  map<string, string> extra_options = 14;
}

message TranscodeHandle {
  string session_id = 1;
  string provider = 2;
  int64 start_time = 3;
  string directory = 4;
  // Private data stored as JSON
  string private_data = 5;
}

message GetProgressRequest {
  TranscodeHandle handle = 1;
}

message GetProgressResponse {
  TranscodingProgress progress = 1;
  string error = 2;
}

message TranscodingProgress {
  int32 percent_complete = 1;
  int64 time_elapsed = 2;      // nanoseconds
  int64 time_remaining = 3;    // nanoseconds
  double current_speed = 4;     // encoding speed multiplier
  int64 bytes_read = 5;
  int64 bytes_written = 6;
  double current_bitrate = 7;
  int32 current_frame = 8;
  double current_fps = 9;
  string status_message = 10;
}

message StopTranscodeProviderRequest {
  TranscodeHandle handle = 1;
}

message StopTranscodeProviderResponse {
  bool success = 1;
  string error = 2;
}

// Streaming messages
message StartStreamRequest {
  TranscodeProviderRequest request = 1;
}

message StartStreamResponse {
  StreamHandle handle = 1;
  string error = 2;
}

message StreamHandle {
  string session_id = 1;
  string provider = 2;
  int64 start_time = 3;
  string content_type = 4;
  string codec = 5;
  // Private data stored as JSON
  string private_data = 6;
}

message GetStreamDataRequest {
  StreamHandle handle = 1;
}

message StreamDataChunk {
  bytes data = 1;
  bool eof = 2;
  string error = 3;
}

message StopStreamRequest {
  StreamHandle handle = 1;
}

message StopStreamResponse {
  bool success = 1;
  string error = 2;
}

// Dashboard service for plugin dashboard integration
service DashboardService {
  rpc GetDashboardSections(GetDashboardSectionsRequest) returns (GetDashboardSectionsResponse);
  rpc GetMainData(GetMainDataRequest) returns (GetMainDataResponse);
  rpc GetNerdData(GetNerdDataRequest) returns (GetNerdDataResponse);
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);
}

// Dashboard service messages
message GetDashboardSectionsRequest {}

message GetDashboardSectionsResponse {
  repeated DashboardSection sections = 1;
  string error = 2;
}

message GetMainDataRequest {
  string section_id = 1;
}

message GetMainDataResponse {
  string data_json = 1;  // JSON-encoded data
  string error = 2;
}

message GetNerdDataRequest {
  string section_id = 1;
}

message GetNerdDataResponse {
  string data_json = 1;  // JSON-encoded data
  string error = 2;
}

message GetMetricsRequest {
  string section_id = 1;
  int64 start_time = 2;  // Unix timestamp
  int64 end_time = 3;    // Unix timestamp
  string step = 4;       // Time step (e.g., "1m", "5m", "1h")
}

message GetMetricsResponse {
  repeated MetricPoint points = 1;
  string error = 2;
}

message DashboardSection {
  string id = 1;
  string plugin_id = 2;
  string type = 3;
  string title = 4;
  string description = 5;
  string icon = 6;
  int32 priority = 7;
  DashboardSectionConfig config = 8;
  DashboardManifest manifest = 9;
}

message DashboardSectionConfig {
  int32 refresh_interval = 1;
  bool supports_realtime = 2;
  bool has_nerd_panel = 3;
  bool requires_auth = 4;
  int32 min_refresh_rate = 5;
  int32 max_data_points = 6;
}

message DashboardManifest {
  string component_type = 1;
  repeated DashboardAction actions = 2;
  map<string, string> ui_schema = 3;  // Simplified as string map
}

message DashboardAction {
  string id = 1;
  string label = 2;
  string icon = 3;
  string style = 4;
  string endpoint = 5;
  string method = 6;
  bool confirm = 7;
  string payload_json = 8;  // JSON-encoded payload
  string shortcut = 9;
}

message MetricPoint {
  int64 timestamp = 1;  // Unix timestamp
  double value = 2;
  map<string, string> labels = 3;
  string metadata_json = 4;  // JSON-encoded metadata
} 